// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	votes "disspace/business/votes"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetIsVoted provides a mock function with given fields: ctx, username, refId
func (_m *Repository) GetIsVoted(ctx context.Context, username string, refId string) (votes.Domain, error) {
	ret := _m.Called(ctx, username, refId)

	var r0 votes.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) votes.Domain); ok {
		r0 = rf(ctx, username, refId)
	} else {
		r0 = ret.Get(0).(votes.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, refId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data, id
func (_m *Repository) Store(ctx context.Context, data *votes.Domain, id string) error {
	ret := _m.Called(ctx, data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *votes.Domain, string) error); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, status, id, refid
func (_m *Repository) Update(ctx context.Context, status int, id string, refid string) error {
	ret := _m.Called(ctx, status, id, refid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, status, id, refid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
