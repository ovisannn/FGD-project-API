// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	user "disspace/business/user"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckingSession provides a mock function with given fields: ctx, username
func (_m *Repository) CheckingSession(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmAuthorization provides a mock function with given fields: ctx, session
func (_m *Repository) ConfirmAuthorization(ctx context.Context, session user.UserSessionDomain) (user.UserSessionDomain, error) {
	ret := _m.Called(ctx, session)

	var r0 user.UserSessionDomain
	if rf, ok := ret.Get(0).(func(context.Context, user.UserSessionDomain) user.UserSessionDomain); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(user.UserSessionDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, user.UserSessionDomain) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSession provides a mock function with given fields: ctx, dataSession
func (_m *Repository) DeleteSession(ctx context.Context, dataSession user.UserSessionDomain) error {
	ret := _m.Called(ctx, dataSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserSessionDomain) error); ok {
		r0 = rf(ctx, dataSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUserProfile provides a mock function with given fields: ctx
func (_m *Repository) GetAllUserProfile(ctx context.Context) ([]user.UserProfileDomain, error) {
	ret := _m.Called(ctx)

	var r0 []user.UserProfileDomain
	if rf, ok := ret.Get(0).(func(context.Context) []user.UserProfileDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.UserProfileDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModerators provides a mock function with given fields: ctx, idCategory
func (_m *Repository) GetModerators(ctx context.Context, idCategory string) ([]user.UserProfileDomain, error) {
	ret := _m.Called(ctx, idCategory)

	var r0 []user.UserProfileDomain
	if rf, ok := ret.Get(0).(func(context.Context, string) []user.UserProfileDomain); ok {
		r0 = rf(ctx, idCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.UserProfileDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id string) (user.UserDomain, error) {
	ret := _m.Called(ctx, id)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserDomain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserByUsername(ctx context.Context, username string) (user.UserDomain, error) {
	ret := _m.Called(ctx, username)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserDomain); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSession provides a mock function with given fields: ctx, dataSession
func (_m *Repository) InsertSession(ctx context.Context, dataSession user.UserSessionDomain) error {
	ret := _m.Called(ctx, dataSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.UserSessionDomain) error); ok {
		r0 = rf(ctx, dataSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Repository) Login(ctx context.Context, username string, password string) (user.UserDomain, error) {
	ret := _m.Called(ctx, username, password)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) user.UserDomain); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, data
func (_m *Repository) Register(ctx context.Context, data *user.UserDomain) (user.UserDomain, error) {
	ret := _m.Called(ctx, data)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserDomain) user.UserDomain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UserDomain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, q, sort
func (_m *Repository) Search(ctx context.Context, q string, sort string) ([]user.UserProfileDomain, error) {
	ret := _m.Called(ctx, q, sort)

	var r0 []user.UserProfileDomain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []user.UserProfileDomain); ok {
		r0 = rf(ctx, q, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.UserProfileDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, q, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserInfo provides a mock function with given fields: ctx, username, data
func (_m *Repository) UpdateUserInfo(ctx context.Context, username string, data user.UserDomain) error {
	ret := _m.Called(ctx, username, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, user.UserDomain) error); ok {
		r0 = rf(ctx, username, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserProfile provides a mock function with given fields: ctx, username, data
func (_m *Repository) UpdateUserProfile(ctx context.Context, username string, data user.UserProfileDomain) error {
	ret := _m.Called(ctx, username, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, user.UserProfileDomain) error); ok {
		r0 = rf(ctx, username, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserProfileGetByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) UserProfileGetByUsername(ctx context.Context, username string) (user.UserProfileDomain, error) {
	ret := _m.Called(ctx, username)

	var r0 user.UserProfileDomain
	if rf, ok := ret.Get(0).(func(context.Context, string) user.UserProfileDomain); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(user.UserProfileDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
